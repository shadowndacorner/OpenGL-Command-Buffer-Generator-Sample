#pragma once
#include <glad/glad.h>
#include "gl_resource_manager.hpp"
#include "raw_rw_buffer.hpp"
#include "gl_function_enums.hpp"

namespace multigl
{
	class CommandBuffer
	{
	public:
		CommandBuffer(ResourceManager& manager);
		~CommandBuffer();

	public:
		void CullFace(multigl::CullFaceMode mode);
		void FrontFace(multigl::FrontFaceDirection mode);
		void Hint(multigl::HintTarget target, multigl::HintMode mode);
		void LineWidth(GLfloat width);
		void PointSize(GLfloat size);
		void PolygonMode(multigl::MaterialFace face, multigl::PolygonMode mode);
		void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
		void TexParameterf(multigl::TextureTarget target, multigl::TextureParameterName pname, GLfloat param);
		void TexParameterfv(multigl::TextureTarget target, multigl::TextureParameterName pname, const GLfloat * params);
		void TexParameteri(multigl::TextureTarget target, multigl::TextureParameterName pname, GLint param);
		void TexParameteriv(multigl::TextureTarget target, multigl::TextureParameterName pname, const GLint * params);
		void TexImage1D(multigl::TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void TexImage2D(multigl::TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void DrawBuffer(multigl::DrawBufferMode buf);
		void Clear(GLbitfield mask);
		void ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
		void ClearStencil(GLint s);
		void ClearDepth(GLdouble depth);
		void StencilMask(GLuint mask);
		void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
		void DepthMask(GLboolean flag);
		void Disable(multigl::EnableCap cap);
		void Enable(multigl::EnableCap cap);
		void Finish();
		void Flush();
		void BlendFunc(multigl::BlendingFactor sfactor, multigl::BlendingFactor dfactor);
		void LogicOp(multigl::LogicOp opcode);
		void StencilFunc(multigl::StencilFunction func, GLint ref, GLuint mask);
		void StencilOp(multigl::StencilOp fail, multigl::StencilOp zfail, multigl::StencilOp zpass);
		void DepthFunc(multigl::DepthFunction func);
		void PixelStoref(multigl::PixelStoreParameter pname, GLfloat param);
		void PixelStorei(multigl::PixelStoreParameter pname, GLint param);
		void ReadBuffer(multigl::ReadBufferMode src);
		void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, multigl::PixelFormat format, multigl::PixelType type, void * pixels);
		void GetBooleanv(multigl::GetPName pname, GLboolean * data);
		void GetDoublev(multigl::GetPName pname, GLdouble * data);
		void GetFloatv(multigl::GetPName pname, GLfloat * data);
		void GetIntegerv(multigl::GetPName pname, GLint * data);
		void GetTexImage(multigl::TextureTarget target, GLint level, multigl::PixelFormat format, multigl::PixelType type, void * pixels);
		void GetTexParameterfv(multigl::TextureTarget target, multigl::GetTextureParameter pname, GLfloat * params);
		void GetTexParameteriv(multigl::TextureTarget target, multigl::GetTextureParameter pname, GLint * params);
		void GetTexLevelParameterfv(multigl::TextureTarget target, GLint level, multigl::GetTextureParameter pname, GLfloat * params);
		void GetTexLevelParameteriv(multigl::TextureTarget target, GLint level, multigl::GetTextureParameter pname, GLint * params);
		void DepthRange(GLdouble n, GLdouble f);
		void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
		void DrawArrays(multigl::PrimitiveType mode, GLint first, GLsizei count);
		void DrawElements(multigl::PrimitiveType mode, GLsizei count, multigl::DrawElementsType type, const void * indices);
		void PolygonOffset(GLfloat factor, GLfloat units);
		void CopyTexImage1D(multigl::TextureTarget target, GLint level, multigl::InternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
		void CopyTexImage2D(multigl::TextureTarget target, GLint level, multigl::InternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
		void CopyTexSubImage1D(multigl::TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
		void CopyTexSubImage2D(multigl::TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void TexSubImage1D(multigl::TextureTarget target, GLint level, GLint xoffset, GLsizei width, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void TexSubImage2D(multigl::TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void BindTexture(multigl::TextureTarget target, TextureHandle texture);
		void DeleteTextures(GLsizei n, const GLuint * textures);
		TextureHandle GenTexture();
		void DrawRangeElements(multigl::PrimitiveType mode, GLuint start, GLuint end, GLsizei count, multigl::DrawElementsType type, const void * indices);
		void TexImage3D(multigl::TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void TexSubImage3D(multigl::TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void CopyTexSubImage3D(multigl::TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void ActiveTexture(multigl::TextureHandle texture);
		void SampleCoverage(GLfloat value, GLboolean invert);
		void CompressedTexImage3D(multigl::TextureTarget target, GLint level, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
		void CompressedTexImage2D(multigl::TextureTarget target, GLint level, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
		void CompressedTexImage1D(multigl::TextureTarget target, GLint level, multigl::InternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
		void CompressedTexSubImage3D(multigl::TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, multigl::PixelFormat format, GLsizei imageSize, const void * data);
		void CompressedTexSubImage2D(multigl::TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, multigl::PixelFormat format, GLsizei imageSize, const void * data);
		void CompressedTexSubImage1D(multigl::TextureTarget target, GLint level, GLint xoffset, GLsizei width, multigl::PixelFormat format, GLsizei imageSize, const void * data);
		void GetCompressedTexImage(multigl::TextureTarget target, GLint level, void * img);
		void BlendFuncSeparate(multigl::BlendingFactor sfactorRGB, multigl::BlendingFactor dfactorRGB, multigl::BlendingFactor sfactorAlpha, multigl::BlendingFactor dfactorAlpha);
		void MultiDrawArrays(multigl::PrimitiveType mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
		void MultiDrawElements(multigl::PrimitiveType mode, const GLsizei * count, multigl::DrawElementsType type, const void *const* indices, GLsizei drawcount);
		void PointParameterf(multigl::PointParameterNameARB pname, GLfloat param);
		void PointParameterfv(multigl::PointParameterNameARB pname, const GLfloat * params);
		void PointParameteri(multigl::PointParameterNameARB pname, GLint param);
		void PointParameteriv(multigl::PointParameterNameARB pname, const GLint * params);
		void BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
		void BlendEquation(multigl::BlendEquationModeEXT mode);
		void GenQueries(GLsizei n, GLuint * ids);
		void DeleteQueries(GLsizei n, const GLuint * ids);
		void BeginQuery(multigl::QueryTarget target, GLuint id);
		void EndQuery(multigl::QueryTarget target);
		void GetQueryiv(multigl::QueryTarget target, multigl::QueryParameterName pname, GLint * params);
		void GetQueryObjectiv(GLuint id, multigl::QueryObjectParameterName pname, GLint * params);
		void GetQueryObjectuiv(GLuint id, multigl::QueryObjectParameterName pname, GLuint * params);
		void BindBuffer(multigl::BufferTarget target, BufferHandle buffer);
		void DeleteBuffers(GLsizei n, const GLuint * buffers);
		BufferHandle GenBuffer();
		void BufferData(multigl::BufferTarget target, GLsizeiptr size, const void * data, multigl::BufferUsageARB usage);
		void BufferSubData(multigl::BufferTarget target, GLintptr offset, GLsizeiptr size, const void * data);
		void GetBufferSubData(multigl::BufferTarget target, GLintptr offset, GLsizeiptr size, void * data);
		void GetBufferParameteriv(multigl::BufferTarget target, multigl::BufferPNameARB pname, GLint * params);
		void GetBufferPointerv(multigl::BufferTarget target, multigl::BufferPointerNameARB pname, void ** params);
		void BlendEquationSeparate(multigl::BlendEquationModeEXT modeRGB, multigl::BlendEquationModeEXT modeAlpha);
		void DrawBuffers(GLsizei n, const GLenum * bufs);
		void StencilOpSeparate(multigl::StencilFaceDirection face, multigl::StencilOp sfail, multigl::StencilOp dpfail, multigl::StencilOp dppass);
		void StencilFuncSeparate(multigl::StencilFaceDirection face, multigl::StencilFunction func, GLint ref, GLuint mask);
		void StencilMaskSeparate(multigl::StencilFaceDirection face, GLuint mask);
		void AttachShader(ShaderProgramHandle program, ShaderHandle shader);
		void BindAttribLocation(ShaderProgramHandle program, GLuint index, const GLchar * name);
		void CompileShader(ShaderHandle shader);
		ShaderProgramHandle CreateProgram();
		ShaderHandle CreateShader(multigl::ShaderType type);
		void DeleteProgram(ShaderProgramHandle program);
		void DeleteShader(ShaderHandle shader);
		void DetachShader(ShaderProgramHandle program, ShaderHandle shader);
		void DisableVertexAttribArray(GLuint index);
		void EnableVertexAttribArray(GLuint index);
		void GetActiveAttrib(ShaderProgramHandle program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
		void GetActiveUniform(ShaderProgramHandle program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
		void GetAttachedShaders(ShaderProgramHandle program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
		void GetProgramiv(ShaderProgramHandle program, multigl::ProgramPropertyARB pname, GLint * params);
		void GetProgramInfoLog(ShaderProgramHandle program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
		void GetShaderiv(ShaderHandle shader, multigl::ShaderParameterName pname, GLint * params);
		void GetShaderInfoLog(ShaderHandle shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
		void GetShaderSource(ShaderHandle shader, GLsizei bufSize, GLsizei * length, GLchar * source);
		void GetUniformfv(ShaderProgramHandle program, GLint location, GLfloat * params);
		void GetUniformiv(ShaderProgramHandle program, GLint location, GLint * params);
		void GetVertexAttribdv(GLuint index, multigl::VertexAttribPropertyARB pname, GLdouble * params);
		void GetVertexAttribfv(GLuint index, multigl::VertexAttribPropertyARB pname, GLfloat * params);
		void GetVertexAttribiv(GLuint index, multigl::VertexAttribPropertyARB pname, GLint * params);
		void GetVertexAttribPointerv(GLuint index, multigl::VertexAttribPointerPropertyARB pname, void ** pointer);
		void LinkProgram(ShaderProgramHandle program);
		void ShaderSource(ShaderHandle shader, const GLchar* string, GLint length);
		void UseProgram(ShaderProgramHandle program);
		void Uniform1f(GLint location, GLfloat v0);
		void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
		void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
		void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
		void Uniform1i(GLint location, GLint v0);
		void Uniform2i(GLint location, GLint v0, GLint v1);
		void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
		void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
		void Uniform1fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform2fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform3fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform4fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform1iv(GLint location, GLsizei count, const GLint * value);
		void Uniform2iv(GLint location, GLsizei count, const GLint * value);
		void Uniform3iv(GLint location, GLsizei count, const GLint * value);
		void Uniform4iv(GLint location, GLsizei count, const GLint * value);
		void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ValidateProgram(ShaderProgramHandle program);
		void VertexAttrib1d(GLuint index, GLdouble x);
		void VertexAttrib1dv(GLuint index, const GLdouble * v);
		void VertexAttrib1f(GLuint index, GLfloat x);
		void VertexAttrib1fv(GLuint index, const GLfloat * v);
		void VertexAttrib1s(GLuint index, GLshort x);
		void VertexAttrib1sv(GLuint index, const GLshort * v);
		void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
		void VertexAttrib2dv(GLuint index, const GLdouble * v);
		void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
		void VertexAttrib2fv(GLuint index, const GLfloat * v);
		void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
		void VertexAttrib2sv(GLuint index, const GLshort * v);
		void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
		void VertexAttrib3dv(GLuint index, const GLdouble * v);
		void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
		void VertexAttrib3fv(GLuint index, const GLfloat * v);
		void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
		void VertexAttrib3sv(GLuint index, const GLshort * v);
		void VertexAttrib4Nbv(GLuint index, const GLbyte * v);
		void VertexAttrib4Niv(GLuint index, const GLint * v);
		void VertexAttrib4Nsv(GLuint index, const GLshort * v);
		void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
		void VertexAttrib4Nubv(GLuint index, const GLubyte * v);
		void VertexAttrib4Nuiv(GLuint index, const GLuint * v);
		void VertexAttrib4Nusv(GLuint index, const GLushort * v);
		void VertexAttrib4bv(GLuint index, const GLbyte * v);
		void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
		void VertexAttrib4dv(GLuint index, const GLdouble * v);
		void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
		void VertexAttrib4fv(GLuint index, const GLfloat * v);
		void VertexAttrib4iv(GLuint index, const GLint * v);
		void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
		void VertexAttrib4sv(GLuint index, const GLshort * v);
		void VertexAttrib4ubv(GLuint index, const GLubyte * v);
		void VertexAttrib4uiv(GLuint index, const GLuint * v);
		void VertexAttrib4usv(GLuint index, const GLushort * v);
		void VertexAttribPointer(GLuint index, GLint size, multigl::VertexAttribPointerType type, GLboolean normalized, GLsizei stride, const void * pointer);
		void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
		void GetBooleani_v(multigl::BufferTarget target, GLuint index, GLboolean * data);
		void GetIntegeri_v(GLenum target, GLuint index, GLint * data);
		void Enablei(multigl::EnableCap target, GLuint index);
		void Disablei(multigl::EnableCap target, GLuint index);
		void BeginTransformFeedback(multigl::PrimitiveType primitiveMode);
		void EndTransformFeedback();
		void BindBufferRange(multigl::BufferTarget target, GLuint index, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void BindBufferBase(multigl::BufferTarget target, GLuint index, BufferHandle buffer);
		void TransformFeedbackVaryings(ShaderProgramHandle program, GLsizei count, const GLchar *const* varyings, multigl::TransformFeedbackBufferMode bufferMode);
		void GetTransformFeedbackVarying(ShaderProgramHandle program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
		void ClampColor(multigl::ClampColorTargetARB target, multigl::ClampColorModeARB clamp);
		void BeginConditionalRender(GLuint id, multigl::ConditionalRenderMode mode);
		void EndConditionalRender();
		void VertexAttribIPointer(GLuint index, GLint size, multigl::VertexAttribPointerType type, GLsizei stride, const void * pointer);
		void GetVertexAttribIiv(GLuint index, multigl::VertexAttribEnum pname, GLint * params);
		void GetVertexAttribIuiv(GLuint index, multigl::VertexAttribEnum pname, GLuint * params);
		void VertexAttribI1i(GLuint index, GLint x);
		void VertexAttribI2i(GLuint index, GLint x, GLint y);
		void VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
		void VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
		void VertexAttribI1ui(GLuint index, GLuint x);
		void VertexAttribI2ui(GLuint index, GLuint x, GLuint y);
		void VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
		void VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
		void VertexAttribI1iv(GLuint index, const GLint * v);
		void VertexAttribI2iv(GLuint index, const GLint * v);
		void VertexAttribI3iv(GLuint index, const GLint * v);
		void VertexAttribI4iv(GLuint index, const GLint * v);
		void VertexAttribI1uiv(GLuint index, const GLuint * v);
		void VertexAttribI2uiv(GLuint index, const GLuint * v);
		void VertexAttribI3uiv(GLuint index, const GLuint * v);
		void VertexAttribI4uiv(GLuint index, const GLuint * v);
		void VertexAttribI4bv(GLuint index, const GLbyte * v);
		void VertexAttribI4sv(GLuint index, const GLshort * v);
		void VertexAttribI4ubv(GLuint index, const GLubyte * v);
		void VertexAttribI4usv(GLuint index, const GLushort * v);
		void GetUniformuiv(ShaderProgramHandle program, GLint location, GLuint * params);
		void BindFragDataLocation(ShaderProgramHandle program, GLuint color, const GLchar * name);
		void Uniform1ui(GLint location, GLuint v0);
		void Uniform2ui(GLint location, GLuint v0, GLuint v1);
		void Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
		void Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
		void Uniform1uiv(GLint location, GLsizei count, const GLuint * value);
		void Uniform2uiv(GLint location, GLsizei count, const GLuint * value);
		void Uniform3uiv(GLint location, GLsizei count, const GLuint * value);
		void Uniform4uiv(GLint location, GLsizei count, const GLuint * value);
		void TexParameterIiv(multigl::TextureTarget target, multigl::TextureParameterName pname, const GLint * params);
		void TexParameterIuiv(multigl::TextureTarget target, multigl::TextureParameterName pname, const GLuint * params);
		void GetTexParameterIiv(multigl::TextureTarget target, multigl::GetTextureParameter pname, GLint * params);
		void GetTexParameterIuiv(multigl::TextureTarget target, multigl::GetTextureParameter pname, GLuint * params);
		void ClearBufferiv(multigl::BufferHandle buffer, GLint drawbuffer, const GLint * value);
		void ClearBufferuiv(multigl::BufferHandle buffer, GLint drawbuffer, const GLuint * value);
		void ClearBufferfv(multigl::BufferHandle buffer, GLint drawbuffer, const GLfloat * value);
		void ClearBufferfi(multigl::BufferHandle buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
		void BindRenderbuffer(multigl::RenderbufferTarget target, RenderbufferHandle renderbuffer);
		void DeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers);
		RenderbufferHandle GenRenderbuffer();
		void RenderbufferStorage(multigl::RenderbufferTarget target, multigl::InternalFormat internalformat, GLsizei width, GLsizei height);
		void GetRenderbufferParameteriv(multigl::RenderbufferTarget target, multigl::RenderbufferParameterName pname, GLint * params);
		void BindFramebuffer(multigl::FramebufferTarget target, FramebufferHandle framebuffer);
		void DeleteFramebuffers(GLsizei n, const GLuint * framebuffers);
		FramebufferHandle GenFramebuffer();
		void FramebufferTexture1D(multigl::FramebufferTarget target, multigl::FramebufferAttachment attachment, multigl::TextureTarget textarget, TextureHandle texture, GLint level);
		void FramebufferTexture2D(multigl::FramebufferTarget target, multigl::FramebufferAttachment attachment, multigl::TextureTarget textarget, TextureHandle texture, GLint level);
		void FramebufferTexture3D(multigl::FramebufferTarget target, multigl::FramebufferAttachment attachment, multigl::TextureTarget textarget, TextureHandle texture, GLint level, GLint zoffset);
		void FramebufferRenderbuffer(multigl::FramebufferTarget target, multigl::FramebufferAttachment attachment, multigl::RenderbufferTarget renderbuffertarget, RenderbufferHandle renderbuffer);
		void GetFramebufferAttachmentParameteriv(multigl::FramebufferTarget target, multigl::FramebufferAttachment attachment, multigl::FramebufferAttachmentParameterName pname, GLint * params);
		void GenerateMipmap(multigl::TextureTarget target);
		void BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, multigl::BlitFramebufferFilter filter);
		void RenderbufferStorageMultisample(multigl::RenderbufferTarget target, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height);
		void FramebufferTextureLayer(multigl::FramebufferTarget target, multigl::FramebufferAttachment attachment, TextureHandle texture, GLint level, GLint layer);
		void FlushMappedBufferRange(multigl::BufferTarget target, GLintptr offset, GLsizeiptr length);
		void BindVertexArray(VertexArrayHandle array);
		void DeleteVertexArrays(GLsizei n, const GLuint * arrays);
		VertexArrayHandle GenVertexArray();
		void DrawArraysInstanced(multigl::PrimitiveType mode, GLint first, GLsizei count, GLsizei instancecount);
		void DrawElementsInstanced(multigl::PrimitiveType mode, GLsizei count, multigl::DrawElementsType type, const void * indices, GLsizei instancecount);
		void TexBuffer(multigl::TextureTarget target, multigl::InternalFormat internalformat, BufferHandle buffer);
		void PrimitiveRestartIndex(GLuint index);
		void CopyBufferSubData(multigl::CopyBufferSubDataTarget readTarget, multigl::CopyBufferSubDataTarget writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		void GetUniformIndices(ShaderProgramHandle program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
		void GetActiveUniformsiv(ShaderProgramHandle program, GLsizei uniformCount, const GLuint * uniformIndices, multigl::UniformPName pname, GLint * params);
		void GetActiveUniformName(ShaderProgramHandle program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
		void GetActiveUniformBlockiv(ShaderProgramHandle program, GLuint uniformBlockIndex, multigl::UniformBlockPName pname, GLint * params);
		void GetActiveUniformBlockName(ShaderProgramHandle program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
		void UniformBlockBinding(ShaderProgramHandle program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
		void DrawElementsBaseVertex(multigl::PrimitiveType mode, GLsizei count, multigl::DrawElementsType type, const void * indices, GLint basevertex);
		void DrawRangeElementsBaseVertex(multigl::PrimitiveType mode, GLuint start, GLuint end, GLsizei count, multigl::DrawElementsType type, const void * indices, GLint basevertex);
		void DrawElementsInstancedBaseVertex(multigl::PrimitiveType mode, GLsizei count, multigl::DrawElementsType type, const void * indices, GLsizei instancecount, GLint basevertex);
		void MultiDrawElementsBaseVertex(multigl::PrimitiveType mode, const GLsizei * count, multigl::DrawElementsType type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
		void ProvokingVertex(multigl::VertexProvokingMode mode);
		void DeleteSync(GLsync sync);
		void WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
		void GetInteger64v(multigl::GetPName pname, GLint64 * data);
		void GetSynciv(GLsync sync, multigl::SyncParameterName pname, GLsizei count, GLsizei * length, GLint * values);
		void GetInteger64i_v(GLenum target, GLuint index, GLint64 * data);
		void GetBufferParameteri64v(multigl::BufferTarget target, multigl::BufferPNameARB pname, GLint64 * params);
		void FramebufferTexture(multigl::FramebufferTarget target, multigl::FramebufferAttachment attachment, TextureHandle texture, GLint level);
		void TexImage2DMultisample(multigl::TextureTarget target, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
		void TexImage3DMultisample(multigl::TextureTarget target, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
		void GetMultisamplefv(multigl::GetMultisamplePNameNV pname, GLuint index, GLfloat * val);
		void SampleMaski(GLuint maskNumber, GLbitfield mask);
		void BindFragDataLocationIndexed(ShaderProgramHandle program, GLuint colorNumber, GLuint index, const GLchar * name);
		void GenSamplers(GLsizei count, GLuint * samplers);
		void DeleteSamplers(GLsizei count, const GLuint * samplers);
		void BindSampler(GLuint unit, GLuint sampler);
		void SamplerParameteri(GLuint sampler, multigl::SamplerParameterI pname, GLint param);
		void SamplerParameteriv(GLuint sampler, multigl::SamplerParameterI pname, const GLint * param);
		void SamplerParameterf(GLuint sampler, multigl::SamplerParameterF pname, GLfloat param);
		void SamplerParameterfv(GLuint sampler, multigl::SamplerParameterF pname, const GLfloat * param);
		void SamplerParameterIiv(GLuint sampler, multigl::SamplerParameterI pname, const GLint * param);
		void SamplerParameterIuiv(GLuint sampler, multigl::SamplerParameterI pname, const GLuint * param);
		void GetSamplerParameteriv(GLuint sampler, multigl::SamplerParameterI pname, GLint * params);
		void GetSamplerParameterIiv(GLuint sampler, multigl::SamplerParameterI pname, GLint * params);
		void GetSamplerParameterfv(GLuint sampler, multigl::SamplerParameterF pname, GLfloat * params);
		void GetSamplerParameterIuiv(GLuint sampler, multigl::SamplerParameterI pname, GLuint * params);
		void QueryCounter(GLuint id, multigl::QueryCounterTarget target);
		void GetQueryObjecti64v(GLuint id, multigl::QueryObjectParameterName pname, GLint64 * params);
		void GetQueryObjectui64v(GLuint id, multigl::QueryObjectParameterName pname, GLuint64 * params);
		void VertexAttribDivisor(GLuint index, GLuint divisor);
		void VertexAttribP1ui(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, GLuint value);
		void VertexAttribP1uiv(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, const GLuint * value);
		void VertexAttribP2ui(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, GLuint value);
		void VertexAttribP2uiv(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, const GLuint * value);
		void VertexAttribP3ui(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, GLuint value);
		void VertexAttribP3uiv(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, const GLuint * value);
		void VertexAttribP4ui(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, GLuint value);
		void VertexAttribP4uiv(GLuint index, multigl::VertexAttribPointerType type, GLboolean normalized, const GLuint * value);
		void VertexP2ui(multigl::VertexPointerType type, GLuint value);
		void VertexP2uiv(multigl::VertexPointerType type, const GLuint * value);
		void VertexP3ui(multigl::VertexPointerType type, GLuint value);
		void VertexP3uiv(multigl::VertexPointerType type, const GLuint * value);
		void VertexP4ui(multigl::VertexPointerType type, GLuint value);
		void VertexP4uiv(multigl::VertexPointerType type, const GLuint * value);
		void TexCoordP1ui(multigl::TexCoordPointerType type, GLuint coords);
		void TexCoordP1uiv(multigl::TexCoordPointerType type, const GLuint * coords);
		void TexCoordP2ui(multigl::TexCoordPointerType type, GLuint coords);
		void TexCoordP2uiv(multigl::TexCoordPointerType type, const GLuint * coords);
		void TexCoordP3ui(multigl::TexCoordPointerType type, GLuint coords);
		void TexCoordP3uiv(multigl::TexCoordPointerType type, const GLuint * coords);
		void TexCoordP4ui(multigl::TexCoordPointerType type, GLuint coords);
		void TexCoordP4uiv(multigl::TexCoordPointerType type, const GLuint * coords);
		void MultiTexCoordP1ui(multigl::TextureHandle texture, multigl::TexCoordPointerType type, GLuint coords);
		void MultiTexCoordP1uiv(multigl::TextureHandle texture, multigl::TexCoordPointerType type, const GLuint * coords);
		void MultiTexCoordP2ui(multigl::TextureHandle texture, multigl::TexCoordPointerType type, GLuint coords);
		void MultiTexCoordP2uiv(multigl::TextureHandle texture, multigl::TexCoordPointerType type, const GLuint * coords);
		void MultiTexCoordP3ui(multigl::TextureHandle texture, multigl::TexCoordPointerType type, GLuint coords);
		void MultiTexCoordP3uiv(multigl::TextureHandle texture, multigl::TexCoordPointerType type, const GLuint * coords);
		void MultiTexCoordP4ui(multigl::TextureHandle texture, multigl::TexCoordPointerType type, GLuint coords);
		void MultiTexCoordP4uiv(multigl::TextureHandle texture, multigl::TexCoordPointerType type, const GLuint * coords);
		void NormalP3ui(multigl::NormalPointerType type, GLuint coords);
		void NormalP3uiv(multigl::NormalPointerType type, const GLuint * coords);
		void ColorP3ui(multigl::ColorPointerType type, GLuint color);
		void ColorP3uiv(multigl::ColorPointerType type, const GLuint * color);
		void ColorP4ui(multigl::ColorPointerType type, GLuint color);
		void ColorP4uiv(multigl::ColorPointerType type, const GLuint * color);
		void SecondaryColorP3ui(multigl::ColorPointerType type, GLuint color);
		void SecondaryColorP3uiv(multigl::ColorPointerType type, const GLuint * color);
		void MinSampleShading(GLfloat value);
		void BlendEquationi(GLuint buf, multigl::BlendEquationModeEXT mode);
		void BlendEquationSeparatei(GLuint buf, multigl::BlendEquationModeEXT modeRGB, multigl::BlendEquationModeEXT modeAlpha);
		void BlendFunci(GLuint buf, multigl::BlendingFactor src, multigl::BlendingFactor dst);
		void BlendFuncSeparatei(GLuint buf, multigl::BlendingFactor srcRGB, multigl::BlendingFactor dstRGB, multigl::BlendingFactor srcAlpha, multigl::BlendingFactor dstAlpha);
		void DrawArraysIndirect(multigl::PrimitiveType mode, const void * indirect);
		void DrawElementsIndirect(multigl::PrimitiveType mode, multigl::DrawElementsType type, const void * indirect);
		void Uniform1d(GLint location, GLdouble x);
		void Uniform2d(GLint location, GLdouble x, GLdouble y);
		void Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
		void Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
		void Uniform1dv(GLint location, GLsizei count, const GLdouble * value);
		void Uniform2dv(GLint location, GLsizei count, const GLdouble * value);
		void Uniform3dv(GLint location, GLsizei count, const GLdouble * value);
		void Uniform4dv(GLint location, GLsizei count, const GLdouble * value);
		void UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void GetUniformdv(ShaderProgramHandle program, GLint location, GLdouble * params);
		void GetActiveSubroutineUniformiv(ShaderProgramHandle program, multigl::ShaderType shadertype, GLuint index, multigl::SubroutineParameterName pname, GLint * values);
		void GetActiveSubroutineUniformName(ShaderProgramHandle program, multigl::ShaderType shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
		void GetActiveSubroutineName(ShaderProgramHandle program, multigl::ShaderType shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
		void UniformSubroutinesuiv(multigl::ShaderType shadertype, GLsizei count, const GLuint * indices);
		void GetUniformSubroutineuiv(multigl::ShaderType shadertype, GLint location, GLuint * params);
		void GetProgramStageiv(ShaderProgramHandle program, multigl::ShaderType shadertype, multigl::ProgramStagePName pname, GLint * values);
		void PatchParameteri(multigl::PatchParameterName pname, GLint value);
		void PatchParameterfv(multigl::PatchParameterName pname, const GLfloat * values);
		void BindTransformFeedback(multigl::BindTransformFeedbackTarget target, GLuint id);
		void DeleteTransformFeedbacks(GLsizei n, const GLuint * ids);
		void GenTransformFeedbacks(GLsizei n, GLuint * ids);
		void PauseTransformFeedback();
		void ResumeTransformFeedback();
		void DrawTransformFeedback(multigl::PrimitiveType mode, GLuint id);
		void DrawTransformFeedbackStream(multigl::PrimitiveType mode, GLuint id, GLuint stream);
		void BeginQueryIndexed(multigl::QueryTarget target, GLuint index, GLuint id);
		void EndQueryIndexed(multigl::QueryTarget target, GLuint index);
		void GetQueryIndexediv(multigl::QueryTarget target, GLuint index, multigl::QueryParameterName pname, GLint * params);
		void ReleaseShaderCompiler();
		void ShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
		void GetShaderPrecisionFormat(multigl::ShaderType shadertype, multigl::PrecisionType precisiontype, GLint * range, GLint * precision);
		void DepthRangef(GLfloat n, GLfloat f);
		void ClearDepthf(GLfloat d);
		void GetProgramBinary(ShaderProgramHandle program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
		void ProgramBinary(ShaderProgramHandle program, GLenum binaryFormat, const void * binary, GLsizei length);
		void ProgramParameteri(ShaderProgramHandle program, multigl::ProgramParameterPName pname, GLint value);
		void UseProgramStages(GLuint pipeline, GLbitfield stages, ShaderProgramHandle program);
		void ActiveShaderProgram(GLuint pipeline, ShaderProgramHandle program);
		void BindProgramPipeline(GLuint pipeline);
		void DeleteProgramPipelines(GLsizei n, const GLuint * pipelines);
		void GenProgramPipelines(GLsizei n, GLuint * pipelines);
		void GetProgramPipelineiv(GLuint pipeline, multigl::PipelineParameterName pname, GLint * params);
		void ProgramUniform1i(ShaderProgramHandle program, GLint location, GLint v0);
		void ProgramUniform1iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform1f(ShaderProgramHandle program, GLint location, GLfloat v0);
		void ProgramUniform1fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform1d(ShaderProgramHandle program, GLint location, GLdouble v0);
		void ProgramUniform1dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform1ui(ShaderProgramHandle program, GLint location, GLuint v0);
		void ProgramUniform1uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniform2i(ShaderProgramHandle program, GLint location, GLint v0, GLint v1);
		void ProgramUniform2iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform2f(ShaderProgramHandle program, GLint location, GLfloat v0, GLfloat v1);
		void ProgramUniform2fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform2d(ShaderProgramHandle program, GLint location, GLdouble v0, GLdouble v1);
		void ProgramUniform2dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform2ui(ShaderProgramHandle program, GLint location, GLuint v0, GLuint v1);
		void ProgramUniform2uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniform3i(ShaderProgramHandle program, GLint location, GLint v0, GLint v1, GLint v2);
		void ProgramUniform3iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform3f(ShaderProgramHandle program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
		void ProgramUniform3fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform3d(ShaderProgramHandle program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
		void ProgramUniform3dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform3ui(ShaderProgramHandle program, GLint location, GLuint v0, GLuint v1, GLuint v2);
		void ProgramUniform3uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniform4i(ShaderProgramHandle program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
		void ProgramUniform4iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform4f(ShaderProgramHandle program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
		void ProgramUniform4fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform4d(ShaderProgramHandle program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
		void ProgramUniform4dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform4ui(ShaderProgramHandle program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
		void ProgramUniform4uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniformMatrix2fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix3fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix4fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix2dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix3dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix4dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix2x3fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix3x2fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix2x4fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix4x2fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix3x4fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix4x3fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix2x3dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix3x2dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix2x4dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix4x2dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix3x4dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix4x3dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ValidateProgramPipeline(GLuint pipeline);
		void GetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
		void VertexAttribL1d(GLuint index, GLdouble x);
		void VertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
		void VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
		void VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
		void VertexAttribL1dv(GLuint index, const GLdouble * v);
		void VertexAttribL2dv(GLuint index, const GLdouble * v);
		void VertexAttribL3dv(GLuint index, const GLdouble * v);
		void VertexAttribL4dv(GLuint index, const GLdouble * v);
		void VertexAttribLPointer(GLuint index, GLint size, multigl::VertexAttribPointerType type, GLsizei stride, const void * pointer);
		void GetVertexAttribLdv(GLuint index, multigl::VertexAttribEnum pname, GLdouble * params);
		void ViewportArrayv(GLuint first, GLsizei count, const GLfloat * v);
		void ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
		void ViewportIndexedfv(GLuint index, const GLfloat * v);
		void ScissorArrayv(GLuint first, GLsizei count, const GLint * v);
		void ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
		void ScissorIndexedv(GLuint index, const GLint * v);
		void DepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v);
		void DepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
		void GetFloati_v(GLenum target, GLuint index, GLfloat * data);
		void GetDoublei_v(GLenum target, GLuint index, GLdouble * data);
		void DrawArraysInstancedBaseInstance(multigl::PrimitiveType mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
		void DrawElementsInstancedBaseInstance(multigl::PrimitiveType mode, GLsizei count, multigl::PrimitiveType type, const void * indices, GLsizei instancecount, GLuint baseinstance);
		void DrawElementsInstancedBaseVertexBaseInstance(multigl::PrimitiveType mode, GLsizei count, multigl::DrawElementsType type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
		void GetInternalformativ(multigl::TextureTarget target, multigl::InternalFormat internalformat, multigl::InternalFormatPName pname, GLsizei count, GLint * params);
		void GetActiveAtomicCounterBufferiv(ShaderProgramHandle program, GLuint bufferIndex, multigl::AtomicCounterBufferPName pname, GLint * params);
		void BindImageTexture(GLuint unit, TextureHandle texture, GLint level, GLboolean layered, GLint layer, multigl::BufferAccessARB access, multigl::InternalFormat format);
		void MemoryBarrier(GLbitfield barriers);
		void TexStorage1D(multigl::TextureTarget target, GLsizei levels, multigl::InternalFormat internalformat, GLsizei width);
		void TexStorage2D(multigl::TextureTarget target, GLsizei levels, multigl::InternalFormat internalformat, GLsizei width, GLsizei height);
		void TexStorage3D(multigl::TextureTarget target, GLsizei levels, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth);
		void DrawTransformFeedbackInstanced(multigl::PrimitiveType mode, GLuint id, GLsizei instancecount);
		void DrawTransformFeedbackStreamInstanced(multigl::PrimitiveType mode, GLuint id, GLuint stream, GLsizei instancecount);
		void ClearBufferData(multigl::BufferStorageTarget target, multigl::InternalFormat internalformat, multigl::PixelFormat format, multigl::PixelType type, const void * data);
		void ClearBufferSubData(multigl::BufferTarget target, multigl::InternalFormat internalformat, GLintptr offset, GLsizeiptr size, multigl::PixelFormat format, multigl::PixelType type, const void * data);
		void DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
		void DispatchComputeIndirect(GLintptr indirect);
		void CopyImageSubData(GLuint srcName, multigl::CopyImageSubDataTarget srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, multigl::CopyImageSubDataTarget dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
		void FramebufferParameteri(multigl::FramebufferTarget target, multigl::FramebufferParameterName pname, GLint param);
		void GetFramebufferParameteriv(multigl::FramebufferTarget target, multigl::FramebufferAttachmentParameterName pname, GLint * params);
		void GetInternalformati64v(multigl::TextureTarget target, multigl::InternalFormat internalformat, multigl::InternalFormatPName pname, GLsizei count, GLint64 * params);
		void InvalidateTexSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
		void InvalidateTexImage(TextureHandle texture, GLint level);
		void InvalidateBufferSubData(BufferHandle buffer, GLintptr offset, GLsizeiptr length);
		void InvalidateBufferData(BufferHandle buffer);
		void InvalidateFramebuffer(multigl::FramebufferTarget target, GLsizei numAttachments, const GLenum * attachments);
		void InvalidateSubFramebuffer(multigl::FramebufferTarget target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
		void MultiDrawArraysIndirect(multigl::PrimitiveType mode, const void * indirect, GLsizei drawcount, GLsizei stride);
		void MultiDrawElementsIndirect(multigl::PrimitiveType mode, multigl::DrawElementsType type, const void * indirect, GLsizei drawcount, GLsizei stride);
		void GetProgramInterfaceiv(ShaderProgramHandle program, multigl::ProgramInterface programInterface, multigl::ProgramInterfacePName pname, GLint * params);
		void GetProgramResourceName(ShaderProgramHandle program, multigl::ProgramInterface programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
		void GetProgramResourceiv(ShaderProgramHandle program, multigl::ProgramInterface programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
		void ShaderStorageBlockBinding(ShaderProgramHandle program, GLuint storageBlockIndex, GLuint storageBlockBinding);
		void TexBufferRange(multigl::TextureTarget target, multigl::InternalFormat internalformat, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void TexStorage2DMultisample(multigl::TextureTarget target, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
		void TexStorage3DMultisample(multigl::TextureTarget target, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
		void TextureView(TextureHandle texture, multigl::TextureTarget target, GLuint origtexture, multigl::InternalFormat internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
		void BindVertexBuffer(GLuint bindingindex, BufferHandle buffer, GLintptr offset, GLsizei stride);
		void VertexAttribFormat(GLuint attribindex, GLint size, multigl::VertexAttribType type, GLboolean normalized, GLuint relativeoffset);
		void VertexAttribIFormat(GLuint attribindex, GLint size, multigl::VertexAttribIType type, GLuint relativeoffset);
		void VertexAttribLFormat(GLuint attribindex, GLint size, multigl::VertexAttribLType type, GLuint relativeoffset);
		void VertexAttribBinding(GLuint attribindex, GLuint bindingindex);
		void VertexBindingDivisor(GLuint bindingindex, GLuint divisor);
		void DebugMessageControl(multigl::DebugSource source, multigl::DebugType type, multigl::DebugSeverity severity, GLsizei count, const GLuint * ids, GLboolean enabled);
		void DebugMessageInsert(multigl::DebugSource source, multigl::DebugType type, GLuint id, multigl::DebugSeverity severity, GLsizei length, const GLchar * buf);
		void DebugMessageCallback(GLDEBUGPROC callback, const void * userParam);
		void PushDebugGroup(multigl::DebugSource source, GLuint id, GLsizei length, const GLchar * message);
		void PopDebugGroup();
		void ObjectLabel(multigl::ObjectIdentifier identifier, GLuint name, GLsizei length, const GLchar * label);
		void GetObjectLabel(multigl::ObjectIdentifier identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
		void ObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label);
		void GetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
		void GetPointerv(multigl::GetPointervPName pname, void ** params);
		void BufferStorage(multigl::BufferStorageTarget target, GLsizeiptr size, const void * data, GLbitfield flags);
		void ClearTexImage(TextureHandle texture, GLint level, multigl::PixelFormat format, multigl::PixelType type, const void * data);
		void ClearTexSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, multigl::PixelFormat format, multigl::PixelType type, const void * data);
		void BindBuffersBase(multigl::BufferTarget target, GLuint first, GLsizei count, const GLuint * buffers);
		void BindBuffersRange(multigl::BufferTarget target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
		void BindTextures(GLuint first, GLsizei count, const GLuint * textures);
		void BindSamplers(GLuint first, GLsizei count, const GLuint * samplers);
		void BindImageTextures(GLuint first, GLsizei count, const GLuint * textures);
		void BindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
		void ClipControl(multigl::ClipControlOrigin origin, multigl::ClipControlDepth depth);
		void CreateTransformFeedbacks(GLsizei n, GLuint * ids);
		void TransformFeedbackBufferBase(GLuint xfb, GLuint index, BufferHandle buffer);
		void TransformFeedbackBufferRange(GLuint xfb, GLuint index, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void GetTransformFeedbackiv(GLuint xfb, multigl::TransformFeedbackPName pname, GLint * param);
		void GetTransformFeedbacki_v(GLuint xfb, multigl::TransformFeedbackPName pname, GLuint index, GLint * param);
		void GetTransformFeedbacki64_v(GLuint xfb, multigl::TransformFeedbackPName pname, GLuint index, GLint64 * param);
		BufferHandle CreateBuffer();
		void NamedBufferStorage(BufferHandle buffer, GLsizeiptr size, const void * data, GLbitfield flags);
		void NamedBufferData(BufferHandle buffer, GLsizeiptr size, const void * data, multigl::VertexBufferObjectUsage usage);
		void NamedBufferSubData(BufferHandle buffer, GLintptr offset, GLsizeiptr size, const void * data);
		void CopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		void ClearNamedBufferData(BufferHandle buffer, multigl::InternalFormat internalformat, multigl::PixelFormat format, multigl::PixelType type, const void * data);
		void ClearNamedBufferSubData(BufferHandle buffer, multigl::InternalFormat internalformat, GLintptr offset, GLsizeiptr size, multigl::PixelFormat format, multigl::PixelType type, const void * data);
		void FlushMappedNamedBufferRange(BufferHandle buffer, GLintptr offset, GLsizeiptr length);
		void GetNamedBufferParameteriv(BufferHandle buffer, multigl::VertexBufferObjectParameter pname, GLint * params);
		void GetNamedBufferParameteri64v(BufferHandle buffer, multigl::VertexBufferObjectParameter pname, GLint64 * params);
		void GetNamedBufferPointerv(BufferHandle buffer, multigl::VertexBufferObjectParameter pname, void ** params);
		void GetNamedBufferSubData(BufferHandle buffer, GLintptr offset, GLsizeiptr size, void * data);
		FramebufferHandle CreateFramebuffer();
		void NamedFramebufferRenderbuffer(FramebufferHandle framebuffer, multigl::FramebufferAttachment attachment, multigl::RenderbufferTarget renderbuffertarget, RenderbufferHandle renderbuffer);
		void NamedFramebufferParameteri(FramebufferHandle framebuffer, multigl::FramebufferParameterName pname, GLint param);
		void NamedFramebufferTexture(FramebufferHandle framebuffer, multigl::FramebufferAttachment attachment, TextureHandle texture, GLint level);
		void NamedFramebufferTextureLayer(FramebufferHandle framebuffer, multigl::FramebufferAttachment attachment, TextureHandle texture, GLint level, GLint layer);
		void NamedFramebufferDrawBuffer(FramebufferHandle framebuffer, multigl::ColorBuffer buf);
		void NamedFramebufferDrawBuffers(FramebufferHandle framebuffer, GLsizei n, const GLenum * bufs);
		void NamedFramebufferReadBuffer(FramebufferHandle framebuffer, multigl::ColorBuffer src);
		void InvalidateNamedFramebufferData(FramebufferHandle framebuffer, GLsizei numAttachments, const GLenum * attachments);
		void InvalidateNamedFramebufferSubData(FramebufferHandle framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
		void ClearNamedFramebufferiv(FramebufferHandle framebuffer, multigl::BufferHandle buffer, GLint drawbuffer, const GLint * value);
		void ClearNamedFramebufferuiv(FramebufferHandle framebuffer, multigl::BufferHandle buffer, GLint drawbuffer, const GLuint * value);
		void ClearNamedFramebufferfv(FramebufferHandle framebuffer, multigl::BufferHandle buffer, GLint drawbuffer, const GLfloat * value);
		void ClearNamedFramebufferfi(FramebufferHandle framebuffer, multigl::BufferHandle buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
		void BlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, multigl::BlitFramebufferFilter filter);
		void GetNamedFramebufferParameteriv(FramebufferHandle framebuffer, multigl::GetFramebufferParameter pname, GLint * param);
		void GetNamedFramebufferAttachmentParameteriv(FramebufferHandle framebuffer, multigl::FramebufferAttachment attachment, multigl::FramebufferAttachmentParameterName pname, GLint * params);
		RenderbufferHandle CreateRenderbuffer();
		void NamedRenderbufferStorage(RenderbufferHandle renderbuffer, multigl::InternalFormat internalformat, GLsizei width, GLsizei height);
		void NamedRenderbufferStorageMultisample(RenderbufferHandle renderbuffer, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height);
		void GetNamedRenderbufferParameteriv(RenderbufferHandle renderbuffer, multigl::RenderbufferParameterName pname, GLint * params);
		TextureHandle CreateTexture(multigl::TextureTarget target);
		void TextureBuffer(TextureHandle texture, multigl::InternalFormat internalformat, BufferHandle buffer);
		void TextureBufferRange(TextureHandle texture, multigl::InternalFormat internalformat, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void TextureStorage1D(TextureHandle texture, GLsizei levels, multigl::InternalFormat internalformat, GLsizei width);
		void TextureStorage2D(TextureHandle texture, GLsizei levels, multigl::InternalFormat internalformat, GLsizei width, GLsizei height);
		void TextureStorage3D(TextureHandle texture, GLsizei levels, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth);
		void TextureStorage2DMultisample(TextureHandle texture, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
		void TextureStorage3DMultisample(TextureHandle texture, GLsizei samples, multigl::InternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
		void TextureSubImage1D(TextureHandle texture, GLint level, GLint xoffset, GLsizei width, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void TextureSubImage2D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void TextureSubImage3D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, multigl::PixelFormat format, multigl::PixelType type, const void * pixels);
		void CompressedTextureSubImage1D(TextureHandle texture, GLint level, GLint xoffset, GLsizei width, multigl::PixelFormat format, GLsizei imageSize, const void * data);
		void CompressedTextureSubImage2D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, multigl::PixelFormat format, GLsizei imageSize, const void * data);
		void CompressedTextureSubImage3D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, multigl::PixelFormat format, GLsizei imageSize, const void * data);
		void CopyTextureSubImage1D(TextureHandle texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
		void CopyTextureSubImage2D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void CopyTextureSubImage3D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void TextureParameterf(TextureHandle texture, multigl::TextureParameterName pname, GLfloat param);
		void TextureParameterfv(TextureHandle texture, multigl::TextureParameterName pname, const GLfloat * param);
		void TextureParameteri(TextureHandle texture, multigl::TextureParameterName pname, GLint param);
		void TextureParameterIiv(TextureHandle texture, multigl::TextureParameterName pname, const GLint * params);
		void TextureParameterIuiv(TextureHandle texture, multigl::TextureParameterName pname, const GLuint * params);
		void TextureParameteriv(TextureHandle texture, multigl::TextureParameterName pname, const GLint * param);
		void GenerateTextureMipmap(TextureHandle texture);
		void BindTextureUnit(GLuint unit, TextureHandle texture);
		void GetTextureImage(TextureHandle texture, GLint level, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * pixels);
		void GetCompressedTextureImage(TextureHandle texture, GLint level, GLsizei bufSize, void * pixels);
		void GetTextureLevelParameterfv(TextureHandle texture, GLint level, multigl::GetTextureParameter pname, GLfloat * params);
		void GetTextureLevelParameteriv(TextureHandle texture, GLint level, multigl::GetTextureParameter pname, GLint * params);
		void GetTextureParameterfv(TextureHandle texture, multigl::GetTextureParameter pname, GLfloat * params);
		void GetTextureParameterIiv(TextureHandle texture, multigl::GetTextureParameter pname, GLint * params);
		void GetTextureParameterIuiv(TextureHandle texture, multigl::GetTextureParameter pname, GLuint * params);
		void GetTextureParameteriv(TextureHandle texture, multigl::GetTextureParameter pname, GLint * params);
		VertexArrayHandle CreateVertexArray();
		void DisableVertexArrayAttrib(VertexArrayHandle vaobj, GLuint index);
		void EnableVertexArrayAttrib(VertexArrayHandle vaobj, GLuint index);
		void VertexArrayElementBuffer(VertexArrayHandle vaobj, BufferHandle buffer);
		void VertexArrayVertexBuffer(VertexArrayHandle vaobj, GLuint bindingindex, BufferHandle buffer, GLintptr offset, GLsizei stride);
		void VertexArrayVertexBuffers(VertexArrayHandle vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
		void VertexArrayAttribBinding(VertexArrayHandle vaobj, GLuint attribindex, GLuint bindingindex);
		void VertexArrayAttribFormat(VertexArrayHandle vaobj, GLuint attribindex, GLint size, multigl::VertexAttribType type, GLboolean normalized, GLuint relativeoffset);
		void VertexArrayAttribIFormat(VertexArrayHandle vaobj, GLuint attribindex, GLint size, multigl::VertexAttribIType type, GLuint relativeoffset);
		void VertexArrayAttribLFormat(VertexArrayHandle vaobj, GLuint attribindex, GLint size, multigl::VertexAttribLType type, GLuint relativeoffset);
		void VertexArrayBindingDivisor(VertexArrayHandle vaobj, GLuint bindingindex, GLuint divisor);
		void GetVertexArrayiv(VertexArrayHandle vaobj, multigl::VertexArrayPName pname, GLint * param);
		void GetVertexArrayIndexediv(VertexArrayHandle vaobj, GLuint index, multigl::VertexArrayPName pname, GLint * param);
		void GetVertexArrayIndexed64iv(VertexArrayHandle vaobj, GLuint index, multigl::VertexArrayPName pname, GLint64 * param);
		void CreateSamplers(GLsizei n, GLuint * samplers);
		void CreateProgramPipelines(GLsizei n, GLuint * pipelines);
		void CreateQueries(multigl::QueryTarget target, GLsizei n, GLuint * ids);
		void GetQueryBufferObjecti64v(GLuint id, BufferHandle buffer, multigl::QueryObjectParameterName pname, GLintptr offset);
		void GetQueryBufferObjectiv(GLuint id, BufferHandle buffer, multigl::QueryObjectParameterName pname, GLintptr offset);
		void GetQueryBufferObjectui64v(GLuint id, BufferHandle buffer, multigl::QueryObjectParameterName pname, GLintptr offset);
		void GetQueryBufferObjectuiv(GLuint id, BufferHandle buffer, multigl::QueryObjectParameterName pname, GLintptr offset);
		void MemoryBarrierByRegion(GLbitfield barriers);
		void GetTextureSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * pixels);
		void GetCompressedTextureSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
		void GetnCompressedTexImage(multigl::TextureTarget target, GLint lod, GLsizei bufSize, void * pixels);
		void GetnTexImage(multigl::TextureTarget target, GLint level, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * pixels);
		void GetnUniformdv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLdouble * params);
		void GetnUniformfv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLfloat * params);
		void GetnUniformiv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLint * params);
		void GetnUniformuiv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLuint * params);
		void ReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * data);
		void GetnMapdv(multigl::MapTarget target, multigl::MapQuery query, GLsizei bufSize, GLdouble * v);
		void GetnMapfv(multigl::MapTarget target, multigl::MapQuery query, GLsizei bufSize, GLfloat * v);
		void GetnMapiv(multigl::MapTarget target, multigl::MapQuery query, GLsizei bufSize, GLint * v);
		void GetnPixelMapfv(multigl::PixelMap map, GLsizei bufSize, GLfloat * values);
		void GetnPixelMapuiv(multigl::PixelMap map, GLsizei bufSize, GLuint * values);
		void GetnPixelMapusv(multigl::PixelMap map, GLsizei bufSize, GLushort * values);
		void GetnPolygonStipple(GLsizei bufSize, GLubyte * pattern);
		void GetnColorTable(multigl::ColorTableTarget target, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * table);
		void GetnConvolutionFilter(multigl::ConvolutionTarget target, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * image);
		void GetnSeparableFilter(multigl::SeparableTargetEXT target, multigl::PixelFormat format, multigl::PixelType type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
		void GetnHistogram(multigl::HistogramTargetEXT target, GLboolean reset, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * values);
		void GetnMinmax(multigl::MinmaxTargetEXT target, GLboolean reset, multigl::PixelFormat format, multigl::PixelType type, GLsizei bufSize, void * values);
		void TextureBarrier();

	public:
		void ProcessCommands();

	private:
		ResourceManager& m_ResourceManager;
		raw_rw_buffer m_Buffer;
	};
}
