#pragma once
#include <glad/glad.h>
#include "gl_resource_manager.hpp"
#include "raw_rw_buffer.hpp"

namespace multigl
{
	class CommandBuffer
	{
	public:
		CommandBuffer(ResourceManager& manager);
		~CommandBuffer();

	public:
		void CullFace(GLenum mode);
		void FrontFace(GLenum mode);
		void Hint(GLenum target, GLenum mode);
		void LineWidth(GLfloat width);
		void PointSize(GLfloat size);
		void PolygonMode(GLenum face, GLenum mode);
		void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
		void TexParameterf(GLenum target, GLenum pname, GLfloat param);
		void TexParameterfv(GLenum target, GLenum pname, const GLfloat * params);
		void TexParameteri(GLenum target, GLenum pname, GLint param);
		void TexParameteriv(GLenum target, GLenum pname, const GLint * params);
		void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
		void TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
		void DrawBuffer(GLenum buf);
		void Clear(GLbitfield mask);
		void ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
		void ClearStencil(GLint s);
		void ClearDepth(GLdouble depth);
		void StencilMask(GLuint mask);
		void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
		void DepthMask(GLboolean flag);
		void Disable(GLenum cap);
		void Enable(GLenum cap);
		void Finish();
		void Flush();
		void BlendFunc(GLenum sfactor, GLenum dfactor);
		void LogicOp(GLenum opcode);
		void StencilFunc(GLenum func, GLint ref, GLuint mask);
		void StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
		void DepthFunc(GLenum func);
		void PixelStoref(GLenum pname, GLfloat param);
		void PixelStorei(GLenum pname, GLint param);
		void ReadBuffer(GLenum src);
		void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
		void GetBooleanv(GLenum pname, GLboolean * data);
		void GetDoublev(GLenum pname, GLdouble * data);
		void GetFloatv(GLenum pname, GLfloat * data);
		void GetIntegerv(GLenum pname, GLint * data);
		void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
		void GetTexParameterfv(GLenum target, GLenum pname, GLfloat * params);
		void GetTexParameteriv(GLenum target, GLenum pname, GLint * params);
		void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params);
		void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params);
		void DepthRange(GLdouble n, GLdouble f);
		void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
		void DrawArrays(GLenum mode, GLint first, GLsizei count);
		void DrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices);
		void PolygonOffset(GLfloat factor, GLfloat units);
		void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
		void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
		void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
		void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
		void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
		void BindTexture(GLenum target, TextureHandle texture);
		void DeleteTextures(GLsizei n, const GLuint * textures);
		TextureHandle GenTexture();
		void DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
		void TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
		void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
		void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void ActiveTexture(TextureHandle texture);
		void SampleCoverage(GLfloat value, GLboolean invert);
		void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
		void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
		void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
		void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
		void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
		void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
		void GetCompressedTexImage(GLenum target, GLint level, void * img);
		void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
		void MultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
		void MultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
		void PointParameterf(GLenum pname, GLfloat param);
		void PointParameterfv(GLenum pname, const GLfloat * params);
		void PointParameteri(GLenum pname, GLint param);
		void PointParameteriv(GLenum pname, const GLint * params);
		void BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
		void BlendEquation(GLenum mode);
		void GenQueries(GLsizei n, GLuint * ids);
		void DeleteQueries(GLsizei n, const GLuint * ids);
		void BeginQuery(GLenum target, GLuint id);
		void EndQuery(GLenum target);
		void GetQueryiv(GLenum target, GLenum pname, GLint * params);
		void GetQueryObjectiv(GLuint id, GLenum pname, GLint * params);
		void GetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params);
		void BindBuffer(GLenum target, BufferHandle buffer);
		void DeleteBuffers(GLsizei n, const GLuint * buffers);
		BufferHandle GenBuffer();
		void BufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
		void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
		void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
		void GetBufferParameteriv(GLenum target, GLenum pname, GLint * params);
		void GetBufferPointerv(GLenum target, GLenum pname, void ** params);
		void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
		void DrawBuffers(GLsizei n, const GLenum * bufs);
		void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
		void StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
		void StencilMaskSeparate(GLenum face, GLuint mask);
		void AttachShader(ShaderProgramHandle program, ShaderHandle shader);
		void BindAttribLocation(ShaderProgramHandle program, GLuint index, const GLchar * name);
		void CompileShader(ShaderHandle shader);
		ShaderProgramHandle CreateProgram();
		ShaderHandle CreateShader(GLenum type);
		void DeleteProgram(ShaderProgramHandle program);
		void DeleteShader(ShaderHandle shader);
		void DetachShader(ShaderProgramHandle program, ShaderHandle shader);
		void DisableVertexAttribArray(GLuint index);
		void EnableVertexAttribArray(GLuint index);
		void GetActiveAttrib(ShaderProgramHandle program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
		void GetActiveUniform(ShaderProgramHandle program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
		void GetAttachedShaders(ShaderProgramHandle program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
		void GetProgramiv(ShaderProgramHandle program, GLenum pname, GLint * params);
		void GetProgramInfoLog(ShaderProgramHandle program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
		void GetShaderiv(ShaderHandle shader, GLenum pname, GLint * params);
		void GetShaderInfoLog(ShaderHandle shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
		void GetShaderSource(ShaderHandle shader, GLsizei bufSize, GLsizei * length, GLchar * source);
		void GetUniformfv(ShaderProgramHandle program, GLint location, GLfloat * params);
		void GetUniformiv(ShaderProgramHandle program, GLint location, GLint * params);
		void GetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params);
		void GetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params);
		void GetVertexAttribiv(GLuint index, GLenum pname, GLint * params);
		void GetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer);
		void LinkProgram(ShaderProgramHandle program);
		void ShaderSource(ShaderHandle shader, const GLchar* string, GLint length);
		void UseProgram(ShaderProgramHandle program);
		void Uniform1f(GLint location, GLfloat v0);
		void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
		void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
		void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
		void Uniform1i(GLint location, GLint v0);
		void Uniform2i(GLint location, GLint v0, GLint v1);
		void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
		void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
		void Uniform1fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform2fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform3fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform4fv(GLint location, GLsizei count, const GLfloat * value);
		void Uniform1iv(GLint location, GLsizei count, const GLint * value);
		void Uniform2iv(GLint location, GLsizei count, const GLint * value);
		void Uniform3iv(GLint location, GLsizei count, const GLint * value);
		void Uniform4iv(GLint location, GLsizei count, const GLint * value);
		void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ValidateProgram(ShaderProgramHandle program);
		void VertexAttrib1d(GLuint index, GLdouble x);
		void VertexAttrib1dv(GLuint index, const GLdouble * v);
		void VertexAttrib1f(GLuint index, GLfloat x);
		void VertexAttrib1fv(GLuint index, const GLfloat * v);
		void VertexAttrib1s(GLuint index, GLshort x);
		void VertexAttrib1sv(GLuint index, const GLshort * v);
		void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
		void VertexAttrib2dv(GLuint index, const GLdouble * v);
		void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
		void VertexAttrib2fv(GLuint index, const GLfloat * v);
		void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
		void VertexAttrib2sv(GLuint index, const GLshort * v);
		void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
		void VertexAttrib3dv(GLuint index, const GLdouble * v);
		void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
		void VertexAttrib3fv(GLuint index, const GLfloat * v);
		void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
		void VertexAttrib3sv(GLuint index, const GLshort * v);
		void VertexAttrib4Nbv(GLuint index, const GLbyte * v);
		void VertexAttrib4Niv(GLuint index, const GLint * v);
		void VertexAttrib4Nsv(GLuint index, const GLshort * v);
		void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
		void VertexAttrib4Nubv(GLuint index, const GLubyte * v);
		void VertexAttrib4Nuiv(GLuint index, const GLuint * v);
		void VertexAttrib4Nusv(GLuint index, const GLushort * v);
		void VertexAttrib4bv(GLuint index, const GLbyte * v);
		void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
		void VertexAttrib4dv(GLuint index, const GLdouble * v);
		void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
		void VertexAttrib4fv(GLuint index, const GLfloat * v);
		void VertexAttrib4iv(GLuint index, const GLint * v);
		void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
		void VertexAttrib4sv(GLuint index, const GLshort * v);
		void VertexAttrib4ubv(GLuint index, const GLubyte * v);
		void VertexAttrib4uiv(GLuint index, const GLuint * v);
		void VertexAttrib4usv(GLuint index, const GLushort * v);
		void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
		void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
		void GetBooleani_v(GLenum target, GLuint index, GLboolean * data);
		void GetIntegeri_v(GLenum target, GLuint index, GLint * data);
		void Enablei(GLenum target, GLuint index);
		void Disablei(GLenum target, GLuint index);
		void BeginTransformFeedback(GLenum primitiveMode);
		void EndTransformFeedback();
		void BindBufferRange(GLenum target, GLuint index, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void BindBufferBase(GLenum target, GLuint index, BufferHandle buffer);
		void TransformFeedbackVaryings(ShaderProgramHandle program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
		void GetTransformFeedbackVarying(ShaderProgramHandle program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
		void ClampColor(GLenum target, GLenum clamp);
		void BeginConditionalRender(GLuint id, GLenum mode);
		void EndConditionalRender();
		void VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
		void GetVertexAttribIiv(GLuint index, GLenum pname, GLint * params);
		void GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params);
		void VertexAttribI1i(GLuint index, GLint x);
		void VertexAttribI2i(GLuint index, GLint x, GLint y);
		void VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
		void VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
		void VertexAttribI1ui(GLuint index, GLuint x);
		void VertexAttribI2ui(GLuint index, GLuint x, GLuint y);
		void VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
		void VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
		void VertexAttribI1iv(GLuint index, const GLint * v);
		void VertexAttribI2iv(GLuint index, const GLint * v);
		void VertexAttribI3iv(GLuint index, const GLint * v);
		void VertexAttribI4iv(GLuint index, const GLint * v);
		void VertexAttribI1uiv(GLuint index, const GLuint * v);
		void VertexAttribI2uiv(GLuint index, const GLuint * v);
		void VertexAttribI3uiv(GLuint index, const GLuint * v);
		void VertexAttribI4uiv(GLuint index, const GLuint * v);
		void VertexAttribI4bv(GLuint index, const GLbyte * v);
		void VertexAttribI4sv(GLuint index, const GLshort * v);
		void VertexAttribI4ubv(GLuint index, const GLubyte * v);
		void VertexAttribI4usv(GLuint index, const GLushort * v);
		void GetUniformuiv(ShaderProgramHandle program, GLint location, GLuint * params);
		void BindFragDataLocation(ShaderProgramHandle program, GLuint color, const GLchar * name);
		void Uniform1ui(GLint location, GLuint v0);
		void Uniform2ui(GLint location, GLuint v0, GLuint v1);
		void Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
		void Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
		void Uniform1uiv(GLint location, GLsizei count, const GLuint * value);
		void Uniform2uiv(GLint location, GLsizei count, const GLuint * value);
		void Uniform3uiv(GLint location, GLsizei count, const GLuint * value);
		void Uniform4uiv(GLint location, GLsizei count, const GLuint * value);
		void TexParameterIiv(GLenum target, GLenum pname, const GLint * params);
		void TexParameterIuiv(GLenum target, GLenum pname, const GLuint * params);
		void GetTexParameterIiv(GLenum target, GLenum pname, GLint * params);
		void GetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params);
		void ClearBufferiv(BufferHandle buffer, GLint drawbuffer, const GLint * value);
		void ClearBufferuiv(BufferHandle buffer, GLint drawbuffer, const GLuint * value);
		void ClearBufferfv(BufferHandle buffer, GLint drawbuffer, const GLfloat * value);
		void ClearBufferfi(BufferHandle buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
		void BindRenderbuffer(GLenum target, RenderbufferHandle renderbuffer);
		void DeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers);
		RenderbufferHandle GenRenderbuffer();
		void RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
		void GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params);
		void BindFramebuffer(GLenum target, FramebufferHandle framebuffer);
		void DeleteFramebuffers(GLsizei n, const GLuint * framebuffers);
		FramebufferHandle GenFramebuffer();
		void FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, TextureHandle texture, GLint level);
		void FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, TextureHandle texture, GLint level);
		void FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, TextureHandle texture, GLint level, GLint zoffset);
		void FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, RenderbufferHandle renderbuffer);
		void GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params);
		void GenerateMipmap(GLenum target);
		void BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
		void RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
		void FramebufferTextureLayer(GLenum target, GLenum attachment, TextureHandle texture, GLint level, GLint layer);
		void FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
		void BindVertexArray(VertexArrayHandle array);
		void DeleteVertexArrays(GLsizei n, const GLuint * arrays);
		VertexArrayHandle GenVertexArray();
		void DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
		void DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
		void TexBuffer(GLenum target, GLenum internalformat, BufferHandle buffer);
		void PrimitiveRestartIndex(GLuint index);
		void CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		void GetUniformIndices(ShaderProgramHandle program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
		void GetActiveUniformsiv(ShaderProgramHandle program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
		void GetActiveUniformName(ShaderProgramHandle program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
		void GetActiveUniformBlockiv(ShaderProgramHandle program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
		void GetActiveUniformBlockName(ShaderProgramHandle program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
		void UniformBlockBinding(ShaderProgramHandle program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
		void DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
		void DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
		void DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
		void MultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
		void ProvokingVertex(GLenum mode);
		void DeleteSync(GLsync sync);
		void WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
		void GetInteger64v(GLenum pname, GLint64 * data);
		void GetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
		void GetInteger64i_v(GLenum target, GLuint index, GLint64 * data);
		void GetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params);
		void FramebufferTexture(GLenum target, GLenum attachment, TextureHandle texture, GLint level);
		void TexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
		void TexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
		void GetMultisamplefv(GLenum pname, GLuint index, GLfloat * val);
		void SampleMaski(GLuint maskNumber, GLbitfield mask);
		void BindFragDataLocationIndexed(ShaderProgramHandle program, GLuint colorNumber, GLuint index, const GLchar * name);
		void GenSamplers(GLsizei count, GLuint * samplers);
		void DeleteSamplers(GLsizei count, const GLuint * samplers);
		void BindSampler(GLuint unit, GLuint sampler);
		void SamplerParameteri(GLuint sampler, GLenum pname, GLint param);
		void SamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param);
		void SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
		void SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param);
		void SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param);
		void SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param);
		void GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params);
		void GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params);
		void GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params);
		void GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params);
		void QueryCounter(GLuint id, GLenum target);
		void GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params);
		void GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params);
		void VertexAttribDivisor(GLuint index, GLuint divisor);
		void VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
		void VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
		void VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
		void VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
		void VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
		void VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
		void VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
		void VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
		void VertexP2ui(GLenum type, GLuint value);
		void VertexP2uiv(GLenum type, const GLuint * value);
		void VertexP3ui(GLenum type, GLuint value);
		void VertexP3uiv(GLenum type, const GLuint * value);
		void VertexP4ui(GLenum type, GLuint value);
		void VertexP4uiv(GLenum type, const GLuint * value);
		void TexCoordP1ui(GLenum type, GLuint coords);
		void TexCoordP1uiv(GLenum type, const GLuint * coords);
		void TexCoordP2ui(GLenum type, GLuint coords);
		void TexCoordP2uiv(GLenum type, const GLuint * coords);
		void TexCoordP3ui(GLenum type, GLuint coords);
		void TexCoordP3uiv(GLenum type, const GLuint * coords);
		void TexCoordP4ui(GLenum type, GLuint coords);
		void TexCoordP4uiv(GLenum type, const GLuint * coords);
		void MultiTexCoordP1ui(TextureHandle texture, GLenum type, GLuint coords);
		void MultiTexCoordP1uiv(TextureHandle texture, GLenum type, const GLuint * coords);
		void MultiTexCoordP2ui(TextureHandle texture, GLenum type, GLuint coords);
		void MultiTexCoordP2uiv(TextureHandle texture, GLenum type, const GLuint * coords);
		void MultiTexCoordP3ui(TextureHandle texture, GLenum type, GLuint coords);
		void MultiTexCoordP3uiv(TextureHandle texture, GLenum type, const GLuint * coords);
		void MultiTexCoordP4ui(TextureHandle texture, GLenum type, GLuint coords);
		void MultiTexCoordP4uiv(TextureHandle texture, GLenum type, const GLuint * coords);
		void NormalP3ui(GLenum type, GLuint coords);
		void NormalP3uiv(GLenum type, const GLuint * coords);
		void ColorP3ui(GLenum type, GLuint color);
		void ColorP3uiv(GLenum type, const GLuint * color);
		void ColorP4ui(GLenum type, GLuint color);
		void ColorP4uiv(GLenum type, const GLuint * color);
		void SecondaryColorP3ui(GLenum type, GLuint color);
		void SecondaryColorP3uiv(GLenum type, const GLuint * color);
		void MinSampleShading(GLfloat value);
		void BlendEquationi(GLuint buf, GLenum mode);
		void BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
		void BlendFunci(GLuint buf, GLenum src, GLenum dst);
		void BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
		void DrawArraysIndirect(GLenum mode, const void * indirect);
		void DrawElementsIndirect(GLenum mode, GLenum type, const void * indirect);
		void Uniform1d(GLint location, GLdouble x);
		void Uniform2d(GLint location, GLdouble x, GLdouble y);
		void Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
		void Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
		void Uniform1dv(GLint location, GLsizei count, const GLdouble * value);
		void Uniform2dv(GLint location, GLsizei count, const GLdouble * value);
		void Uniform3dv(GLint location, GLsizei count, const GLdouble * value);
		void Uniform4dv(GLint location, GLsizei count, const GLdouble * value);
		void UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void GetUniformdv(ShaderProgramHandle program, GLint location, GLdouble * params);
		void GetActiveSubroutineUniformiv(ShaderProgramHandle program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
		void GetActiveSubroutineUniformName(ShaderProgramHandle program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
		void GetActiveSubroutineName(ShaderProgramHandle program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
		void UniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices);
		void GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params);
		void GetProgramStageiv(ShaderProgramHandle program, GLenum shadertype, GLenum pname, GLint * values);
		void PatchParameteri(GLenum pname, GLint value);
		void PatchParameterfv(GLenum pname, const GLfloat * values);
		void BindTransformFeedback(GLenum target, GLuint id);
		void DeleteTransformFeedbacks(GLsizei n, const GLuint * ids);
		void GenTransformFeedbacks(GLsizei n, GLuint * ids);
		void PauseTransformFeedback();
		void ResumeTransformFeedback();
		void DrawTransformFeedback(GLenum mode, GLuint id);
		void DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
		void BeginQueryIndexed(GLenum target, GLuint index, GLuint id);
		void EndQueryIndexed(GLenum target, GLuint index);
		void GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params);
		void ReleaseShaderCompiler();
		void ShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
		void GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
		void DepthRangef(GLfloat n, GLfloat f);
		void ClearDepthf(GLfloat d);
		void GetProgramBinary(ShaderProgramHandle program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
		void ProgramBinary(ShaderProgramHandle program, GLenum binaryFormat, const void * binary, GLsizei length);
		void ProgramParameteri(ShaderProgramHandle program, GLenum pname, GLint value);
		void UseProgramStages(GLuint pipeline, GLbitfield stages, ShaderProgramHandle program);
		void ActiveShaderProgram(GLuint pipeline, ShaderProgramHandle program);
		void BindProgramPipeline(GLuint pipeline);
		void DeleteProgramPipelines(GLsizei n, const GLuint * pipelines);
		void GenProgramPipelines(GLsizei n, GLuint * pipelines);
		void GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params);
		void ProgramUniform1i(ShaderProgramHandle program, GLint location, GLint v0);
		void ProgramUniform1iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform1f(ShaderProgramHandle program, GLint location, GLfloat v0);
		void ProgramUniform1fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform1d(ShaderProgramHandle program, GLint location, GLdouble v0);
		void ProgramUniform1dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform1ui(ShaderProgramHandle program, GLint location, GLuint v0);
		void ProgramUniform1uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniform2i(ShaderProgramHandle program, GLint location, GLint v0, GLint v1);
		void ProgramUniform2iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform2f(ShaderProgramHandle program, GLint location, GLfloat v0, GLfloat v1);
		void ProgramUniform2fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform2d(ShaderProgramHandle program, GLint location, GLdouble v0, GLdouble v1);
		void ProgramUniform2dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform2ui(ShaderProgramHandle program, GLint location, GLuint v0, GLuint v1);
		void ProgramUniform2uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniform3i(ShaderProgramHandle program, GLint location, GLint v0, GLint v1, GLint v2);
		void ProgramUniform3iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform3f(ShaderProgramHandle program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
		void ProgramUniform3fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform3d(ShaderProgramHandle program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
		void ProgramUniform3dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform3ui(ShaderProgramHandle program, GLint location, GLuint v0, GLuint v1, GLuint v2);
		void ProgramUniform3uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniform4i(ShaderProgramHandle program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
		void ProgramUniform4iv(ShaderProgramHandle program, GLint location, GLsizei count, const GLint * value);
		void ProgramUniform4f(ShaderProgramHandle program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
		void ProgramUniform4fv(ShaderProgramHandle program, GLint location, GLsizei count, const GLfloat * value);
		void ProgramUniform4d(ShaderProgramHandle program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
		void ProgramUniform4dv(ShaderProgramHandle program, GLint location, GLsizei count, const GLdouble * value);
		void ProgramUniform4ui(ShaderProgramHandle program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
		void ProgramUniform4uiv(ShaderProgramHandle program, GLint location, GLsizei count, const GLuint * value);
		void ProgramUniformMatrix2fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix3fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix4fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix2dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix3dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix4dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix2x3fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix3x2fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix2x4fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix4x2fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix3x4fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix4x3fv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
		void ProgramUniformMatrix2x3dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix3x2dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix2x4dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix4x2dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix3x4dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ProgramUniformMatrix4x3dv(ShaderProgramHandle program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
		void ValidateProgramPipeline(GLuint pipeline);
		void GetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
		void VertexAttribL1d(GLuint index, GLdouble x);
		void VertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
		void VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
		void VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
		void VertexAttribL1dv(GLuint index, const GLdouble * v);
		void VertexAttribL2dv(GLuint index, const GLdouble * v);
		void VertexAttribL3dv(GLuint index, const GLdouble * v);
		void VertexAttribL4dv(GLuint index, const GLdouble * v);
		void VertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
		void GetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params);
		void ViewportArrayv(GLuint first, GLsizei count, const GLfloat * v);
		void ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
		void ViewportIndexedfv(GLuint index, const GLfloat * v);
		void ScissorArrayv(GLuint first, GLsizei count, const GLint * v);
		void ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
		void ScissorIndexedv(GLuint index, const GLint * v);
		void DepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v);
		void DepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
		void GetFloati_v(GLenum target, GLuint index, GLfloat * data);
		void GetDoublei_v(GLenum target, GLuint index, GLdouble * data);
		void DrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
		void DrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
		void DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
		void GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
		void GetActiveAtomicCounterBufferiv(ShaderProgramHandle program, GLuint bufferIndex, GLenum pname, GLint * params);
		void BindImageTexture(GLuint unit, TextureHandle texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
		void MemoryBarrier(GLbitfield barriers);
		void TexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
		void TexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
		void TexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
		void DrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
		void DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
		void ClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
		void ClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
		void DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
		void DispatchComputeIndirect(GLintptr indirect);
		void CopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
		void FramebufferParameteri(GLenum target, GLenum pname, GLint param);
		void GetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params);
		void GetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
		void InvalidateTexSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
		void InvalidateTexImage(TextureHandle texture, GLint level);
		void InvalidateBufferSubData(BufferHandle buffer, GLintptr offset, GLsizeiptr length);
		void InvalidateBufferData(BufferHandle buffer);
		void InvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments);
		void InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
		void MultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
		void MultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
		void GetProgramInterfaceiv(ShaderProgramHandle program, GLenum programInterface, GLenum pname, GLint * params);
		void GetProgramResourceName(ShaderProgramHandle program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
		void GetProgramResourceiv(ShaderProgramHandle program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
		void ShaderStorageBlockBinding(ShaderProgramHandle program, GLuint storageBlockIndex, GLuint storageBlockBinding);
		void TexBufferRange(GLenum target, GLenum internalformat, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void TexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
		void TexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
		void TextureView(TextureHandle texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
		void BindVertexBuffer(GLuint bindingindex, BufferHandle buffer, GLintptr offset, GLsizei stride);
		void VertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
		void VertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
		void VertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
		void VertexAttribBinding(GLuint attribindex, GLuint bindingindex);
		void VertexBindingDivisor(GLuint bindingindex, GLuint divisor);
		void DebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
		void DebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
		void DebugMessageCallback(GLDEBUGPROC callback, const void * userParam);
		void PushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message);
		void PopDebugGroup();
		void ObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
		void GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
		void ObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label);
		void GetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
		void GetPointerv(GLenum pname, void ** params);
		void BufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
		void ClearTexImage(TextureHandle texture, GLint level, GLenum format, GLenum type, const void * data);
		void ClearTexSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
		void BindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
		void BindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
		void BindTextures(GLuint first, GLsizei count, const GLuint * textures);
		void BindSamplers(GLuint first, GLsizei count, const GLuint * samplers);
		void BindImageTextures(GLuint first, GLsizei count, const GLuint * textures);
		void BindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
		void ClipControl(GLenum origin, GLenum depth);
		void CreateTransformFeedbacks(GLsizei n, GLuint * ids);
		void TransformFeedbackBufferBase(GLuint xfb, GLuint index, BufferHandle buffer);
		void TransformFeedbackBufferRange(GLuint xfb, GLuint index, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void GetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param);
		void GetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param);
		void GetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
		BufferHandle CreateBuffer();
		void NamedBufferStorage(BufferHandle buffer, GLsizeiptr size, const void * data, GLbitfield flags);
		void NamedBufferData(BufferHandle buffer, GLsizeiptr size, const void * data, GLenum usage);
		void NamedBufferSubData(BufferHandle buffer, GLintptr offset, GLsizeiptr size, const void * data);
		void CopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		void ClearNamedBufferData(BufferHandle buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
		void ClearNamedBufferSubData(BufferHandle buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
		void FlushMappedNamedBufferRange(BufferHandle buffer, GLintptr offset, GLsizeiptr length);
		void GetNamedBufferParameteriv(BufferHandle buffer, GLenum pname, GLint * params);
		void GetNamedBufferParameteri64v(BufferHandle buffer, GLenum pname, GLint64 * params);
		void GetNamedBufferPointerv(BufferHandle buffer, GLenum pname, void ** params);
		void GetNamedBufferSubData(BufferHandle buffer, GLintptr offset, GLsizeiptr size, void * data);
		FramebufferHandle CreateFramebuffer();
		void NamedFramebufferRenderbuffer(FramebufferHandle framebuffer, GLenum attachment, GLenum renderbuffertarget, RenderbufferHandle renderbuffer);
		void NamedFramebufferParameteri(FramebufferHandle framebuffer, GLenum pname, GLint param);
		void NamedFramebufferTexture(FramebufferHandle framebuffer, GLenum attachment, TextureHandle texture, GLint level);
		void NamedFramebufferTextureLayer(FramebufferHandle framebuffer, GLenum attachment, TextureHandle texture, GLint level, GLint layer);
		void NamedFramebufferDrawBuffer(FramebufferHandle framebuffer, GLenum buf);
		void NamedFramebufferDrawBuffers(FramebufferHandle framebuffer, GLsizei n, const GLenum * bufs);
		void NamedFramebufferReadBuffer(FramebufferHandle framebuffer, GLenum src);
		void InvalidateNamedFramebufferData(FramebufferHandle framebuffer, GLsizei numAttachments, const GLenum * attachments);
		void InvalidateNamedFramebufferSubData(FramebufferHandle framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
		void ClearNamedFramebufferiv(FramebufferHandle framebuffer, BufferHandle buffer, GLint drawbuffer, const GLint * value);
		void ClearNamedFramebufferuiv(FramebufferHandle framebuffer, BufferHandle buffer, GLint drawbuffer, const GLuint * value);
		void ClearNamedFramebufferfv(FramebufferHandle framebuffer, BufferHandle buffer, GLint drawbuffer, const GLfloat * value);
		void ClearNamedFramebufferfi(FramebufferHandle framebuffer, BufferHandle buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
		void BlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
		void GetNamedFramebufferParameteriv(FramebufferHandle framebuffer, GLenum pname, GLint * param);
		void GetNamedFramebufferAttachmentParameteriv(FramebufferHandle framebuffer, GLenum attachment, GLenum pname, GLint * params);
		RenderbufferHandle CreateRenderbuffer();
		void NamedRenderbufferStorage(RenderbufferHandle renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
		void NamedRenderbufferStorageMultisample(RenderbufferHandle renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
		void GetNamedRenderbufferParameteriv(RenderbufferHandle renderbuffer, GLenum pname, GLint * params);
		TextureHandle CreateTexture(GLenum target);
		void TextureBuffer(TextureHandle texture, GLenum internalformat, BufferHandle buffer);
		void TextureBufferRange(TextureHandle texture, GLenum internalformat, BufferHandle buffer, GLintptr offset, GLsizeiptr size);
		void TextureStorage1D(TextureHandle texture, GLsizei levels, GLenum internalformat, GLsizei width);
		void TextureStorage2D(TextureHandle texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
		void TextureStorage3D(TextureHandle texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
		void TextureStorage2DMultisample(TextureHandle texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
		void TextureStorage3DMultisample(TextureHandle texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
		void TextureSubImage1D(TextureHandle texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
		void TextureSubImage2D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
		void TextureSubImage3D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
		void CompressedTextureSubImage1D(TextureHandle texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
		void CompressedTextureSubImage2D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
		void CompressedTextureSubImage3D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
		void CopyTextureSubImage1D(TextureHandle texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
		void CopyTextureSubImage2D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void CopyTextureSubImage3D(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
		void TextureParameterf(TextureHandle texture, GLenum pname, GLfloat param);
		void TextureParameterfv(TextureHandle texture, GLenum pname, const GLfloat * param);
		void TextureParameteri(TextureHandle texture, GLenum pname, GLint param);
		void TextureParameterIiv(TextureHandle texture, GLenum pname, const GLint * params);
		void TextureParameterIuiv(TextureHandle texture, GLenum pname, const GLuint * params);
		void TextureParameteriv(TextureHandle texture, GLenum pname, const GLint * param);
		void GenerateTextureMipmap(TextureHandle texture);
		void BindTextureUnit(GLuint unit, TextureHandle texture);
		void GetTextureImage(TextureHandle texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
		void GetCompressedTextureImage(TextureHandle texture, GLint level, GLsizei bufSize, void * pixels);
		void GetTextureLevelParameterfv(TextureHandle texture, GLint level, GLenum pname, GLfloat * params);
		void GetTextureLevelParameteriv(TextureHandle texture, GLint level, GLenum pname, GLint * params);
		void GetTextureParameterfv(TextureHandle texture, GLenum pname, GLfloat * params);
		void GetTextureParameterIiv(TextureHandle texture, GLenum pname, GLint * params);
		void GetTextureParameterIuiv(TextureHandle texture, GLenum pname, GLuint * params);
		void GetTextureParameteriv(TextureHandle texture, GLenum pname, GLint * params);
		VertexArrayHandle CreateVertexArray();
		void DisableVertexArrayAttrib(VertexArrayHandle vaobj, GLuint index);
		void EnableVertexArrayAttrib(VertexArrayHandle vaobj, GLuint index);
		void VertexArrayElementBuffer(VertexArrayHandle vaobj, BufferHandle buffer);
		void VertexArrayVertexBuffer(VertexArrayHandle vaobj, GLuint bindingindex, BufferHandle buffer, GLintptr offset, GLsizei stride);
		void VertexArrayVertexBuffers(VertexArrayHandle vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
		void VertexArrayAttribBinding(VertexArrayHandle vaobj, GLuint attribindex, GLuint bindingindex);
		void VertexArrayAttribFormat(VertexArrayHandle vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
		void VertexArrayAttribIFormat(VertexArrayHandle vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
		void VertexArrayAttribLFormat(VertexArrayHandle vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
		void VertexArrayBindingDivisor(VertexArrayHandle vaobj, GLuint bindingindex, GLuint divisor);
		void GetVertexArrayiv(VertexArrayHandle vaobj, GLenum pname, GLint * param);
		void GetVertexArrayIndexediv(VertexArrayHandle vaobj, GLuint index, GLenum pname, GLint * param);
		void GetVertexArrayIndexed64iv(VertexArrayHandle vaobj, GLuint index, GLenum pname, GLint64 * param);
		void CreateSamplers(GLsizei n, GLuint * samplers);
		void CreateProgramPipelines(GLsizei n, GLuint * pipelines);
		void CreateQueries(GLenum target, GLsizei n, GLuint * ids);
		void GetQueryBufferObjecti64v(GLuint id, BufferHandle buffer, GLenum pname, GLintptr offset);
		void GetQueryBufferObjectiv(GLuint id, BufferHandle buffer, GLenum pname, GLintptr offset);
		void GetQueryBufferObjectui64v(GLuint id, BufferHandle buffer, GLenum pname, GLintptr offset);
		void GetQueryBufferObjectuiv(GLuint id, BufferHandle buffer, GLenum pname, GLintptr offset);
		void MemoryBarrierByRegion(GLbitfield barriers);
		void GetTextureSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
		void GetCompressedTextureSubImage(TextureHandle texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
		void GetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels);
		void GetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
		void GetnUniformdv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLdouble * params);
		void GetnUniformfv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLfloat * params);
		void GetnUniformiv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLint * params);
		void GetnUniformuiv(ShaderProgramHandle program, GLint location, GLsizei bufSize, GLuint * params);
		void ReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
		void GetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
		void GetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
		void GetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
		void GetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values);
		void GetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values);
		void GetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values);
		void GetnPolygonStipple(GLsizei bufSize, GLubyte * pattern);
		void GetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
		void GetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
		void GetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
		void GetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
		void GetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
		void TextureBarrier();

	public:
		void ProcessCommands();

	private:
		ResourceManager& m_ResourceManager;
		raw_rw_buffer m_Buffer;
	};
}
